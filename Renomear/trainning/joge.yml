---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Casual Infrastructure Causes Disasters module for AWS Gameday 2017. For problems, contact the Cloudy Mediums content experts (https://w.amazon.com/bin/view/AWS_GameDay/support)"
Parameters:
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  ClusterSize:
    Default: 2
    Description: "How many ECS hosts do you want to initially deploy?"
    Type: Number
  EnvironmentName:
    Description: "An environment name that will be prefixed to resource names"
    Default: CICD-GD17
    Type: String
  GDAPIBase:
    Description: "GameDay API Base URL (https://hostname:port/api)"
    Default: https://api.eventengine.run
    Type: String
  GDAPIToken:
    Description: "GameDay API Token to use for authentication"
    Default: THISISFINE
    Type: String
  GDGameId:
    Description: "ID of the GameDay Game instance"
    Default: 8f9bf6cb42cb435db9a2922d9c62d56a
    Type: String
  GDModuleId:
    Description: "Name of the module"
    Type: String
    Default: "casual_infrastructure_causes_disasters"
  GDLifecycleTopicArn:
    Description: ARN of the GameDay Module lifecycle SNS topic
    Type: String
  InstanceType:
    Default: c4.large
    Description: "Which instance type should we use to build the ECS cluster?"
    Type: String
  ECRMasterAccount:
    Description: This is the account ID for the master account which hosts the ECR images (DON'T TOUCH)
    Type: String
    Default: "095979563153"
  ECRMasterAccountRegion:
    Description: This is the region the ECR repos are hosted in, in the master account (DON'T TOUCH)
    Type: String
    Default: us-east-1
  ECRImageTag:
    Description: This is the ECR tag for different environments (DON'T TOUCH)
    Type: String
    Default: 68

Resources:
  
# Redis Elasticache to replace DDB
  ElasticacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Elasticache Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId: !Ref ECSDefaultSecurityGroup

  ElasticacheSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - ElasticacheSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - ElasticacheSecurityGroup
        - GroupId
            
  ElasticacheReplicationCluster:
    Type: "AWS::ElastiCache::ReplicationGroup"
    Properties: 
      AutomaticFailoverEnabled: true
      CacheNodeType: "cache.t2.small"
      CacheParameterGroupName: default.redis3.2.cluster.on
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
      Engine: "redis"
      EngineVersion: "3.2.10"
      NumCacheClusters: 2
      ReplicationGroupDescription: "CICD Redis Replication Group"
      SecurityGroupIds:
        - !Ref ElasticacheSecurityGroup

  
  ElasticacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "CICD Redis Subnet Group"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
# SQS
  cicdSenderQueue:
    Type: AWS::SQS::Queue
    Properties: 
      KmsMasterKeyId: alias/aws/sqs

  cicdFailedScoreQueue:
    Type: AWS::SQS::Queue
    Properties: 
      KmsMasterKeyId: alias/aws/sqs

# ECS Services / Tasks
  cicdMakerService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref cicdMakerTask

  cicdSenderService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref cicdSenderTask

  cicdGitpusherService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref cicdGitpusherTask

  cicdMasterService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref cicdMasterTask

  cicdAPIService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSAutoScalingGroup
      - LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ECSServiceRole
      DesiredCount: 2
      TaskDefinition: !Ref cicdAPITask
      LoadBalancers:
        - ContainerName: cicd_api
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  cicdMakerTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub ${AWS::StackName}-cicd-maker
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          Essential: "true"
          Image: !Sub "${ECRMasterAccount}.dkr.ecr.${ECRMasterAccountRegion}.amazonaws.com/gd2017-cicd_maker:${ECRImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cicdMakerLogGroup
              awslogs-region: !Ref "AWS::Region"
          Memory: "512"
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            -
              Name: "GD_API_BASE"
              Value: !Ref GDAPIBase
            -
              Name: "GD_GAME_ID"
              Value: !Ref GDGameId
            -
              Name: "GD_API_TOKEN"
              Value: !Ref GDAPIToken
            -
              Name: "GD_MODULE_ID"
              Value: !Ref GDModuleId
            -
              Name: "GD_CICD_CONFIG"
              Value: !GetAtt ElasticacheReplicationCluster.ConfigurationEndPoint.Address
            -
              Name: "GD_CICD_SQS"
              Value: !Ref cicdSenderQueue
            -
              Name: "LOAD_BALANCER"
              Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
          Name: "cicd_maker"

  cicdMasterTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub ${AWS::StackName}-cicd-master
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          Essential: "true"
          Image: !Sub "${ECRMasterAccount}.dkr.ecr.${ECRMasterAccountRegion}.amazonaws.com/gd2017-cicd_master:${ECRImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cicdMasterLogGroup
              awslogs-region: !Ref "AWS::Region"
          Memory: "128"
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            -
              Name: "GD_API_BASE"
              Value: !Ref GDAPIBase
            -
              Name: "GD_GAME_ID"
              Value: !Ref GDGameId
            -
              Name: "GD_API_TOKEN"
              Value: !Ref GDAPIToken
            -
              Name: "GD_MODULE_ID"
              Value: !Ref GDModuleId
            -
              Name: "GD_CICD_CONFIG"
              Value: !GetAtt ElasticacheReplicationCluster.ConfigurationEndPoint.Address
            -
              Name: "GD_CICD_FAILSQS"
              Value: !Ref cicdFailedScoreQueue
            -
              Name: "LOAD_BALANCER"
              Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
          Name: "cicd_master"

  cicdSenderTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub ${AWS::StackName}-cicd-sender
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          Essential: "true"
          Image: !Sub "${ECRMasterAccount}.dkr.ecr.${ECRMasterAccountRegion}.amazonaws.com/gd2017-cicd_sender:${ECRImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cicdSenderLogGroup
              awslogs-region: !Ref "AWS::Region"
          Memory: "1024" #500 locusts need some memory, this will do about 73 rps
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            -
              Name: "GD_API_BASE"
              Value: !Ref GDAPIBase
            -
              Name: "GD_GAME_ID"
              Value: !Ref GDGameId
            -
              Name: "GD_API_TOKEN"
              Value: !Ref GDAPIToken
            -
              Name: "GD_MODULE_ID"
              Value: !Ref GDModuleId
            -
              Name: "GD_CICD_CONFIG"
              Value: !GetAtt ElasticacheReplicationCluster.ConfigurationEndPoint.Address
            -
              Name: "GD_CICD_SQS"
              Value: !Ref cicdSenderQueue
            -
              Name: "GD_CICD_FAILSQS"
              Value: !Ref cicdFailedScoreQueue
            -
              Name: "GD_POINT_TYPE"
              Value: "ppm"
            -
              Name: "GD_POINT_RATIO"
              Value: "1.0"
          Name: "cicd_sender"

  cicdGitpusherTask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub ${AWS::StackName}-cicd-gitpusher
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          Essential: "true"
          Image: !Sub "${ECRMasterAccount}.dkr.ecr.${ECRMasterAccountRegion}.amazonaws.com/gd2017-cicd_gitpusher:${ECRImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cicdGitLogGroup
              awslogs-region: !Ref "AWS::Region"
          Memory: "512"
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            -
              Name: "GD_CICD_CONFIG"
              Value: !GetAtt ElasticacheReplicationCluster.ConfigurationEndPoint.Address
            -
              Name: "GD_API_BASE"
              Value: !Ref GDAPIBase
            -
              Name: "GD_GAME_ID"
              Value: !Ref GDGameId
            -
              Name: "GD_API_TOKEN"
              Value: !Ref GDAPIToken
            -
              Name: "GD_MODULE_ID"
              Value: !Ref GDModuleId
            -
              Name: "GD_CICD_MAX200GITPUSH"
              Value: 'true'
            -
              Name: "GD_CICD_CHAOS"
              Value: 0.25
          Name: "cicd_gitpusher"

  cicdAPITask:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub ${AWS::StackName}-cicd-api
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        -
          Essential: "true"
          Image: !Sub "${ECRMasterAccount}.dkr.ecr.${ECRMasterAccountRegion}.amazonaws.com/gd2017-cicd_api:${ECRImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cicdAPILogGroup
              awslogs-region: !Ref "AWS::Region"
          Memory: "256"
          PortMappings:
            - ContainerPort: 5000
          Environment:
            -
              Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            -
              Name: "GD_API_BASE"
              Value: !Ref GDAPIBase
            -
              Name: "GD_GAME_ID"
              Value: !Ref GDGameId
            -
              Name: "GD_API_TOKEN"
              Value: !Ref GDAPIToken
            -
              Name: "GD_MODULE_ID"
              Value: !Ref GDModuleId
            -
              Name: "GD_CICD_CONFIG"
              Value: !GetAtt ElasticacheReplicationCluster.ConfigurationEndPoint.Address
            -
              Name: "LOAD_BALANCER"
              Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
          Name: "cicd_api"

  cicdMasterLogGroup:
    Properties:
      LogGroupName: Game/CICD-master
    Type: "AWS::Logs::LogGroup"

  cicdGitLogGroup:
    Properties:
      LogGroupName: Game/CICD-git
    Type: "AWS::Logs::LogGroup"

  cicdMakerLogGroup:
    Properties:
      LogGroupName: Game/CICD-maker
    Type: "AWS::Logs::LogGroup"

  cicdSenderLogGroup:
    Properties:
      LogGroupName: Game/CICD-sender
    Type: "AWS::Logs::LogGroup"

  cicdAPILogGroup:
    Properties:
      LogGroupName: Game/CICD-api
    Type: "AWS::Logs::LogGroup"

# ECS Cluster stuff
  ECSCluster:
    Properties:
      ClusterName: !Ref EnvironmentName
    Type: "AWS::ECS::Cluster"

  ECSClientSecurityGroup:
    Properties:
      GroupDescription: "ECS Client Security Group"
      VpcId: !Ref VPC
    Type: "AWS::EC2::SecurityGroup"

  ECSDefaultSecurityGroup:
    Properties:
      GroupDescription: "ECS Default Security Group"
      SecurityGroupIngress:
        -
          FromPort: "0"
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ECSClientSecurityGroup
          ToPort: "65535"
        -
          FromPort: "0"
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroup
          ToPort: "65535"
      VpcId: !Ref VPC
    Type: "AWS::EC2::SecurityGroup"

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${ECSCluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ECSInstanceProfile
      SecurityGroups:
        - !Ref ECSDefaultSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

# ALB Stuff

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

# IAM Stuff
  ECSInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole
    Type: "AWS::IAM::InstanceProfile"

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSXrayFullAccess
      Policies:
        - 
          PolicyName: AssumeRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: "*"

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  #VPC Stuff, as we wont get given it in GD master, and ALB needs known Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: '10.192.0.0/16'
        Tags:
            - Key: Name
              Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
            - Key: Name
              Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs ]
        CidrBlock: '10.192.10.0/24'
        MapPublicIpOnLaunch: true
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs ]
        CidrBlock: '10.192.11.0/24'
        MapPublicIpOnLaunch: true
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

Outputs:
  BackendEndpoint:
    Description: Unicorn Rentals Main Backend
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
